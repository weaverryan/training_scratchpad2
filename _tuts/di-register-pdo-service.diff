diff --git a/app/config/services.yml b/app/config/services.yml
index c1c8bc3..08aaa8d 100644
--- a/app/config/services.yml
+++ b/app/config/services.yml
@@ -6,4 +6,10 @@ parameters:
 services:
     app.product_repository:
         class: AppBundle\Service\ProductRepository
-        arguments: ['@logger']
+        arguments: ['@logger', '@app.pdo']
+
+    app.pdo:
+        class: PDO
+        arguments:
+            - 'mysql:host=localhost;dbname=chicago_training'
+            - 'root'
diff --git a/src/AppBundle/Service/ProductRepository.php b/src/AppBundle/Service/ProductRepository.php
index 2e6d187..3a88f02 100644
--- a/src/AppBundle/Service/ProductRepository.php
+++ b/src/AppBundle/Service/ProductRepository.php
@@ -8,15 +8,17 @@ use Psr\Log\LoggerInterface;
 class ProductRepository
 {
     private $logger;
+    private $pdo;
 
-    public function __construct(LoggerInterface $logger)
+    public function __construct(LoggerInterface $logger, \PDO $pdo)
     {
         $this->logger = $logger;
+        $this->pdo = $pdo;
     }
 
     public function findAll()
     {
-        $pdo = $this->getPDO();
+        $pdo = $this->pdo;
 
         $stmt = $pdo->prepare('SELECT * FROM product');
         $stmt->execute();
@@ -38,7 +40,7 @@ class ProductRepository
      */
     public function findOne($id) : ?Product
     {
-        $pdo = $this->getPDO();
+        $pdo = $this->pdo;
         $stmt = $pdo->prepare('SELECT * FROM product WHERE id = :id');
         $stmt->execute(['id' => $id]);
         $row = $stmt->fetch();
@@ -50,17 +52,6 @@ class ProductRepository
         return $this->hydrateProduct($row);
     }
 
-    /**
-     * @return \PDO
-     */
-    private function getPDO()
-    {
-        $pdo = new \PDO('mysql:host=localhost;dbname=chicago_training', 'root');
-        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
-
-        return $pdo;
-    }
-
     private function hydrateProduct(array $row)
     {
         $product = new Product();
